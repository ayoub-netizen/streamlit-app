import streamlit as st
import cv2
import numpy as np
from sklearn.cluster import KMeans

st.title("Analyse de Plan avec Détection de Couleurs")

uploaded_file = st.file_uploader("Téléchargez le plan coloré", type=["png", "jpg", "jpeg"])

if uploaded_file is not None:
    image = cv2.imdecode(np.frombuffer(uploaded_file.read(), np.uint8), 1)
    image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

    pixels = image_rgb.reshape(-1, 3)
    num_clusters = 5
    kmeans = KMeans(n_clusters=num_clusters, random_state=0).fit(pixels)
    centers = kmeans.cluster_centers_.astype(int)
    labels = kmeans.labels_

    color_names = [f"Color_{i}" for i in range(num_clusters)]
    masks = {}
    for i, color_name in enumerate(color_names):
        mask = (labels == i).astype(np.uint8) * 255
        mask = mask.reshape(image_rgb.shape[:2])
        masks[color_name] = mask

    st.write("Couleurs détectées :")
    for i, color_name in enumerate(color_names):
        st.write(f"{i}: {color_name}")

    reference_color_name = st.selectbox("Choisissez la couleur de référence", options=color_names)

    if reference_color_name:
        surface_reference = st.number_input(f"Entrez la surface de la pièce de référence ({reference_color_name}) en m²", min_value=0.0, format="%.2f")

        area_pixels_reference = np.sum(masks[reference_color_name] > 0)
        surfaces_m2 = {}

        for color_name, mask in masks.items():
            area_pixels = np.sum(mask > 0)
            if area_pixels_reference > 0:
                area_m2 = (area_pixels / area_pixels_reference) * surface_reference
                surfaces_m2[color_name] = area_m2
            else:
                surfaces_m2[color_name] = 0

        st.write("Surfaces estimées pour chaque couleur :")
        for color_name, area_m2 in surfaces_m2.items():
            st.write(f"Surface estimée pour {color_name} : {area_m2:.2f} m²")

        # Afficher l'image avec les contours détectés
        contour_image = image.copy()
        for color_name, mask in masks.items():
            contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
            for contour in contours:
                cv2.drawContours(contour_image, [contour], -1, (0, 255, 0), 2)

        contour_image = cv2.cvtColor(contour_image, cv2.COLOR_BGR2RGB)
        st.image(contour_image, channels="RGB", caption="Image avec contours détectés")